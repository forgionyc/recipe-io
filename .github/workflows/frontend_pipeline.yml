name: Frontend Pipeline

on:
  push:
    branches:
      - main
    pull_request:
      branches: [main]
      types: [opened, synchronize]

jobs:
  frontend_testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check directory
        run: |
          cd ia-frontp
          pwd
          ls -l

      - name: Install dependencies
        run: |
          cd ia-frontp
          npm install

      - name: Audit dependencies
        run: |
          cd ia-frontp
          npm audit

      - name: Prettier code
        run: |
          cd ia-frontp
          npm run prettier

      - name: Lint code
        run: |
          cd ia-frontp
          npm run lint

  Deploy_AWS:
    if: ${{ github.event_name == 'push' && !contains(toJson(github.event.commits.*.message), '#skipfront') }}
    needs: frontend_testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }} # set this to your preferred AWS region, e.g. us-west-1
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # set this to your Amazon ECR repository name
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }} # set this to your Amazon ECS service name
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }} # set this to your Amazon ECS cluster name
          ECS_TASK_DEFINITION_FRONT:
            ${{ secrets.ECS_TASK_DEFINITION }} # set this to the path to your Amazon ECS task definition
            # file, e.g. .aws/task-definition.json
          CONTAINER_NAME_FRONT:
            ${{ secrets.CONTAINER_NAME }} # set this to the name of the container in the
            # containerDefinitions section of your task definition

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ia-frontp
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ secrets.ECS_TASK_DEFINITION_FRONT }}
      #     container-name: ${{ secrets.CONTAINER_NAME_FRONT }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ secrets.ECS_SERVICE }}
      #     cluster: ${{ secrets.ECS_CLUSTER }}
      #     wait-for-service-stability: true
